@layer theme, base, components, utilities;

/*
Import order matters for Tailwind CSS v4 compatibility

External @import statements MUST come before Tailwind imports because:
1. CSS spec requires ALL @import statements to precede other CSS rules (except @charset/@layer)
2. Tailwind CSS v4 expands its imports into thousands of lines of generated utility CSS
3. If external imports come after Tailwind imports, they end up after the generated CSS
4. This causes PostCSS to throw: "@import must precede all other statements"

The correct order is:
- @layer declarations (empty)
- External @import statements (fonts, icons, etc.)
- Tailwind @import statements (theme, utilities)
- @config directives
- Regular CSS rules
*/

/* External imports must come first, before Tailwind imports */
@import url("@vscode/codicons/dist/codicon.css");
/* Font import removed - @fontsource/azeret-mono not in dependencies */
/* @import url("../node_modules/@fontsource/azeret-mono/index.css"); */

/* Tailwind imports come after external imports */
@import "tailwindcss/theme.css" layer(theme);
/* Disable Tailwind's CSS reset to preserve existing styles */
/* @import "tailwindcss/preflight.css" layer(base); */
@import "tailwindcss/utilities.css" layer(utilities);

/* Configuration directives come after all imports */
/* Note: @config is a valid Tailwind CSS v4 directive (linter may show warning) */
@config "../tailwind.config.mjs";

/* ==========================================================================
   Focus Indicators - WCAG 2.1 Level AA Compliant
   ========================================================================== */

/* Textarea focus styles */
textarea:focus {
	outline: 2px solid var(--vscode-focusBorder, #007fd4);
	outline-offset: 1px;
}

/* Button focus styles - use focus-visible for keyboard-only focus */
button:focus-visible,
vscode-button::part(control):focus-visible {
	outline: 2px solid var(--vscode-focusBorder, #007fd4);
	outline-offset: 2px;
}

/* Remove default outline on mouse click, but keep for keyboard navigation */
button:focus:not(:focus-visible),
vscode-button::part(control):focus:not(:focus-visible) {
	outline: none;
}

/* ==========================================================================
   Message Animations - Ultra-Smooth, Comfortable Streaming Experience
   ========================================================================== */

/* Ultra-gentle fade for streaming - imperceptible motion, maximum comfort */
@keyframes messageFadeIn {
	from {
		opacity: 0;
		transform: translateY(0.5px); /* Barely perceptible - halved from 1px */
	}
	50% {
		opacity: 0.8; /* Faster fade-in for smoother perception */
	}
	to {
		opacity: 1;
		transform: translateY(0);
	}
}

/* Whisper-soft content reveal - effortless to watch */
@keyframes contentReveal {
	from {
		opacity: 0;
		transform: translateY(1px); /* Halved from 2px for gentler motion */
		filter: blur(0.5px); /* Halved from 1px - almost imperceptible */
	}
	50% {
		opacity: 0.75; /* Smoother mid-transition */
	}
	to {
		opacity: 1;
		transform: translateY(0);
		filter: blur(0);
	}
}

/* Silky smooth stagger - natural cascade effect */
@keyframes staggerIn {
	from {
		opacity: 0;
		transform: translateX(-1px) translateY(0.5px); /* Halved for ultra-subtle motion */
	}
	50% {
		opacity: 0.7; /* Gentler mid-point for eye comfort */
	}
	to {
		opacity: 1;
		transform: translateX(0) translateY(0);
	}
}

/* Feather-light entry - smooth as silk */
@keyframes messageSlideIn {
	from {
		opacity: 0;
		transform: translateX(-1px) translateY(1px); /* Halved from 2px for minimal distraction */
	}
	40% {
		opacity: 0.75; /* Smoother early fade for visual comfort */
	}
	to {
		opacity: 1;
		transform: translateX(0) translateY(0);
	}
}

/* Smooth message entry - effortless, natural perception */
.message-enter {
	animation: messageSlideIn 0.22s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Natural ease - slightly faster with smoother curve */
	will-change: transform, opacity;
}

/* Whisper-soft fade for streaming - maximum comfort for extended viewing */
.message-streaming {
	animation: messageFadeIn 0.18s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Faster, smoother easing */
	will-change: opacity;
}

/* Progressive reveal - easy on the eyes */
.content-reveal {
	animation: contentReveal 0.25s cubic-bezier(0.25, 0.46, 0.45, 0.94); /* Faster with natural easing */
	will-change: opacity, transform;
}

/* Staggered animation - cohesive, natural flow */
.stagger-item {
	animation: staggerIn 0.13s cubic-bezier(0.25, 0.46, 0.45, 0.94) backwards; /* Faster for more cohesive perception */
}

/* Ultra-tight stagger timing for seamless cascade */
.stagger-item:nth-child(1) {
	animation-delay: 0ms;
}
.stagger-item:nth-child(2) {
	animation-delay: 20ms; /* Tightened from 30ms */
}
.stagger-item:nth-child(3) {
	animation-delay: 40ms; /* Tightened from 60ms */
}
.stagger-item:nth-child(4) {
	animation-delay: 60ms; /* Tightened from 90ms */
}
.stagger-item:nth-child(5) {
	animation-delay: 80ms; /* Tightened from 120ms */
}
.stagger-item:nth-child(n + 6) {
	animation-delay: 100ms; /* Tightened from 150ms */
}

/* Silk-smooth transitions for state changes */
.message-transition {
	transition: all 0.18s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

/* Fluid helper for effortless state changes */
.fluid-transition {
	transition: all 0.16s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

/* Accessibility: Respect user's motion preferences */
@media (prefers-reduced-motion: reduce) {
	.message-enter,
	.message-streaming,
	.content-reveal,
	.stagger-item {
		animation: none !important;
	}

	.message-transition,
	.fluid-transition {
		transition: none !important;
	}
}

/* ==========================================================================
   Input Responsiveness - Smooth Interactions
   ========================================================================== */

/* Smooth textarea resize with minimal lag */
textarea {
	transition: height 0.12s cubic-bezier(0.16, 1, 0.3, 1);
	will-change: height;
}

/* Instant button feedback with micro-bounce */
button:active {
	transform: scale(0.96);
	transition: transform 0.08s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Smooth hover states with instant feel */
button:hover:not(:disabled) {
	transition:
		background-color 0.12s ease-out,
		color 0.12s ease-out,
		transform 0.12s ease-out;
	transform: translateY(-1px);
}

/* Haptic-style visual pulse for interactions */
@keyframes hapticPulse {
	0% {
		transform: scale(1);
		box-shadow: 0 0 0 0 currentColor;
	}
	50% {
		transform: scale(1.02);
		box-shadow: 0 0 0 4px transparent;
	}
	100% {
		transform: scale(1);
		box-shadow: 0 0 0 0 transparent;
	}
}

.haptic-feedback {
	animation: hapticPulse 0.3s cubic-bezier(0.16, 1, 0.3, 1);
}

/* Interactive element states with instant perception */
.interactive-element {
	transition: all 0.15s cubic-bezier(0.16, 1, 0.3, 1);
	cursor: pointer;
}

.interactive-element:hover {
	filter: brightness(1.1);
}

.interactive-element:active {
	filter: brightness(0.95);
	transform: scale(0.98);
}

/* ==========================================================================
   Scroll Performance - Buttery Smooth, Effortless Navigation
   ========================================================================== */

/* GPU-accelerated scrolling with world-class comfort */
.scrollable {
	will-change: scroll-position;
	-webkit-overflow-scrolling: touch;
	transform: translateZ(0);
	/* Optimize rendering performance */
	contain: layout style paint;
	/* Prevent jarring bounce/rubber-band at scroll boundaries */
	overscroll-behavior: contain;
	/* Reserve space for scrollbar to prevent layout shift */
	scrollbar-gutter: stable;
	/* Ultra-smooth momentum scrolling on touch devices */
	scroll-behavior: smooth;
	/* Snap to content for crisp, comfortable scrolling */
	scroll-padding: 16px;
}

/* Silky smooth scroll with natural, human-perceived easing */
html {
	scroll-behavior: smooth;
	/* Prevent bounce at document boundaries */
	overscroll-behavior-y: contain;
	/* Optimize text rendering for comfort during scroll */
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

/* Accessibility: Instant scroll for reduced motion */
@media (prefers-reduced-motion: reduce) {
	.scrollable,
	html {
		scroll-behavior: auto !important;
	}
}

/* Optimize rendering performance */
.optimize-rendering {
	content-visibility: auto;
	contain-intrinsic-size: auto 500px;
}

/* ==========================================================================
   Motion Preferences - Accessibility First
   ========================================================================== */

/* Respect user's motion preferences */
@media (prefers-reduced-motion: reduce) {
	*,
	*::before,
	*::after {
		animation-duration: 0.01ms !important;
		animation-iteration-count: 1 !important;
		transition-duration: 0.01ms !important;
		scroll-behavior: auto !important;
	}

	/* Keep essential animations visible but faster */
	.skeleton-pulse,
	.skeleton-shimmer {
		animation-duration: 1s !important;
	}
}

/* Enhanced motion for users who prefer it */
@media (prefers-reduced-motion: no-preference) {
	.enhanced-motion {
		transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
	}

	.enhanced-motion:hover {
		transform: scale(1.02) translateY(-2px);
	}
}

/* ==========================================================================
   Loading States - Skeleton Animations
   ========================================================================== */

@keyframes pulse {
	0%,
	100% {
		opacity: 1;
	}
	50% {
		opacity: 0.5;
	}
}

.skeleton-pulse {
	animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes shimmer {
	0% {
		background-position: -200% 0;
	}
	100% {
		background-position: 200% 0;
	}
}

.skeleton-shimmer {
	background: linear-gradient(
		90deg,
		var(--vscode-editor-background) 25%,
		var(--vscode-list-hoverBackground) 50%,
		var(--vscode-editor-background) 75%
	);
	background-size: 200% 100%;
	animation: shimmer 1.5s ease-in-out infinite;
}

/* Progressive loading wave effect */
@keyframes loadingWave {
	0% {
		transform: translateX(-100%);
	}
	100% {
		transform: translateX(100%);
	}
}

.loading-wave {
	position: relative;
	overflow: hidden;
}

.loading-wave::after {
	content: "";
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: linear-gradient(90deg, transparent, var(--vscode-list-hoverBackground), transparent);
	animation: loadingWave 1.5s ease-in-out infinite;
}

/* Optimistic loading indicator */
@keyframes optimisticLoad {
	0% {
		transform: scaleX(0);
		transform-origin: left;
	}
	50% {
		transform: scaleX(0.7);
		transform-origin: left;
	}
	100% {
		transform: scaleX(1);
		transform-origin: left;
	}
}

.optimistic-loader {
	animation: optimisticLoad 0.8s cubic-bezier(0.16, 1, 0.3, 1);
}

/* Spinner animation */
@keyframes spin {
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(360deg);
	}
}

/* ==========================================================================
   View Transitions API Support
   Note: These pseudo-elements are valid CSS from the View Transitions API spec.
   Linter warnings are false positives - these work in Chrome 111+, Edge 111+, Safari 18+.
   ========================================================================== */

/* Base transitions */
::view-transition-old(root),
::view-transition-new(root) {
	animation-duration: 0.3s;
	animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
}

/* Fade transition */
::view-transition-old(fade) {
	animation: fade-out 0.3s ease-in-out;
}

::view-transition-new(fade) {
	animation: fade-in 0.3s ease-in-out;
}

/* Slide transitions */
::view-transition-old(slide-left) {
	animation: slide-out-left 0.4s cubic-bezier(0.16, 1, 0.3, 1);
}

::view-transition-new(slide-left) {
	animation: slide-in-left 0.4s cubic-bezier(0.16, 1, 0.3, 1);
}

@keyframes slide-out-left {
	to {
		transform: translateX(-100%);
		opacity: 0;
	}
}

@keyframes slide-in-left {
	from {
		transform: translateX(100%);
		opacity: 0;
	}
}

/* Respect reduced motion for view transitions */
@media (prefers-reduced-motion: reduce) {
	::view-transition-old(*),
	::view-transition-new(*) {
		animation-duration: 0.01ms !important;
	}
}

/* ==========================================================================
   Paint Holding Support
   ========================================================================== */

/* Prevent flash during paint hold */
.paint-hold-active {
	visibility: visible;
}

/* Loading overlay */
.paint-hold-loading {
	animation: paint-hold-fade-in 0.15s ease-out;
}

@keyframes paint-hold-fade-in {
	from {
		opacity: 0;
	}
	to {
		opacity: 0.5;
	}
}

/* Optimize rendering during hold */
.paint-hold-optimized {
	content-visibility: auto;
	contain: layout style paint;
}

/* Interactive divs with role="button" */
div[role="button"]:focus-visible {
	outline: 2px solid var(--vscode-focusBorder, #007fd4);
	outline-offset: 2px;
}

div[role="button"]:focus:not(:focus-visible) {
	outline: none;
}

/* Links focus styles */
a:focus-visible {
	outline: 2px solid var(--vscode-focusBorder, #007fd4);
	outline-offset: 2px;
}

a:focus:not(:focus-visible) {
	outline: none;
}

/* Input fields focus styles */
input:focus-visible,
select:focus-visible {
	outline: 2px solid var(--vscode-focusBorder, #007fd4);
	outline-offset: 1px;
}

/* ==========================================================================
   Screen Reader Only Utility
   ========================================================================== */

/* 
 * Hide content visually but keep it accessible to screen readers.
 * Used for ARIA live regions and skip navigation links.
 */
.sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border-width: 0;
}

/* Show sr-only content when it receives focus (for skip links) */
.sr-only:focus {
	position: fixed;
	top: 0;
	left: 0;
	width: auto;
	height: auto;
	padding: 1rem;
	margin: 0;
	overflow: visible;
	clip: auto;
	white-space: normal;
	background: var(--vscode-editor-background);
	color: var(--vscode-editor-foreground);
	border: 2px solid var(--vscode-focusBorder);
	z-index: 1000;
}

/*
Use vscode native scrollbar styles
https://github.com/gitkraken/vscode-gitlens/blob/b1d71d4844523e8b2ef16f9e007068e91f46fd88/src/webviews/apps/home/home.scss
*/

html {
	height: 100%;
	width: 100%;
}

body {
	margin: 0;
	padding: 0;
	line-height: 1.25;
	height: 100%;
	width: 100%;
}

#root {
	height: 100%;
	width: 100%;
}

body.scrollable,
.scrollable,
body.code-block-scrollable,
.code-block-scrollable {
	border-color: transparent;
	transition: border-color 0.7s linear;
}

body:hover.scrollable,
body:hover .scrollable,
body:focus-within.scrollable,
body:focus-within .scrollable,
body:hover.code-block-scrollable,
body:hover .code-block-scrollable,
body:focus-within.code-block-scrollable,
body:focus-within .code-block-scrollable {
	border-color: var(--vscode-scrollbarSlider-background);
	transition: none;
}

.scrollable::-webkit-scrollbar-corner {
	background-color: transparent !important;
}

.scrollable::-webkit-scrollbar-thumb {
	background-color: transparent;
	border-color: inherit;
	border-right-style: inset;
	border-right-width: calc(100vw + 100vh);
	border-radius: unset !important;
}

.scrollable::-webkit-scrollbar-thumb:hover {
	border-color: var(--vscode-scrollbarSlider-hoverBackground);
}

.scrollable::-webkit-scrollbar-thumb:active {
	border-color: var(--vscode-scrollbarSlider-activeBackground);
}

/*
Fix VSCode ignoring webkit scrollbar modifiers
https://github.com/microsoft/vscode/issues/213045
*/
@supports selector(::-webkit-scrollbar) {
	html {
		scrollbar-color: unset;
	}
}

/*
The above scrollbar styling uses some transparent background color magic to accomplish its animation. However this doesn't play nicely with SyntaxHighlighter, so we need to set a background color for the code blocks' horizontal scrollbar. This actually has the unintended consequence of always showing the scrollbar which I prefer since it makes it more obvious that there is more content to scroll to.
*/

.code-block-scrollable::-webkit-scrollbar-track {
	background: transparent;
}

.code-block-scrollable::-webkit-scrollbar-thumb {
	background-color: var(--vscode-scrollbarSlider-background);
	border-radius: 5px;
	border: 2px solid transparent;
	background-clip: content-box;
}

.code-block-scrollable::-webkit-scrollbar-thumb:hover {
	background-color: var(--vscode-scrollbarSlider-hoverBackground);
}

.code-block-scrollable::-webkit-scrollbar-thumb:active {
	background-color: var(--vscode-scrollbarSlider-activeBackground);
}

.code-block-scrollable::-webkit-scrollbar-corner {
	background-color: transparent;
}

/*
Dropdown label
https://github.com/microsoft/vscode-webview-ui-toolkit/tree/main/src/dropdown#with-label
*/
.dropdown-container {
	box-sizing: border-box;
	display: flex;
	flex-flow: column nowrap;
	align-items: flex-start;
	justify-content: flex-start;
}
.dropdown-container label {
	display: block;
	color: var(--vscode-foreground);
	cursor: pointer;
	font-size: var(--vscode-font-size);
	line-height: normal;
	margin-bottom: 2px;
}

/* Fix scrollbar in dropdown */

vscode-dropdown::part(listbox) {
	border-color: var(--vscode-scrollbarSlider-background);
	transition: none;
	scrollbar-color: var(--vscode-scrollbarSlider-background) transparent;
}

/* Faded icon buttons in textfields */

.input-icon-button {
	cursor: pointer;
	opacity: 0.65;
}
.input-icon-button:hover {
	opacity: 1;
}
.input-icon-button.disabled {
	cursor: not-allowed;
	opacity: 0.4;
}
.input-icon-button.disabled:hover {
	opacity: 0.4;
}

/* Context mentions */

.mention-context-textarea-highlight {
	background-color: color-mix(in srgb, var(--vscode-badge-foreground) 30%, transparent);
	border-radius: 3px;
	box-shadow: 0 0 0 0.5px color-mix(in srgb, var(--vscode-badge-foreground) 30%, transparent);
	color: transparent;
	/* padding: 0.5px;
	margin: -0.5px;
	position: relative;
	bottom: -0.5px; */
}

.mention-context-highlight {
	background-color: color-mix(in srgb, var(--vscode-badge-foreground) 30%, transparent);
	border-radius: 3px;
}

.mention-context-highlight-with-shadow {
	background-color: color-mix(in srgb, var(--vscode-badge-foreground) 30%, transparent);
	border-radius: 3px;
	box-shadow: 0 0 0 0.5px color-mix(in srgb, var(--vscode-badge-foreground) 30%, transparent);
}

.slash-command-match-textarea-highlight {
	background-color: color-mix(in srgb, var(--vscode-focusBorder) 30%, transparent);
	border-radius: 3px;
	box-shadow: 0 0 0 0.5px color-mix(in srgb, var(--vscode-focusBorder) 30%, transparent);
	color: transparent;
}

/* ==========================================================================
   MarieCoder Brand Utilities
   ========================================================================== */

/**
 * Branded gradient backgrounds and buttons
 */
.marie-brand-gradient {
	background: linear-gradient(135deg, #6b46c1 0%, #9333ea 100%);
}

.marie-brand-gradient-text {
	background: linear-gradient(135deg, #6b46c1 0%, #9333ea 100%);
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
	background-clip: text;
}

/**
 * Branded button styles
 * Use for accent actions that need extra emphasis
 */
.marie-coder-accent {
	background: linear-gradient(135deg, #6b46c1 0%, #9333ea 100%) !important;
	border: 1px solid #6b46c1 !important;
	color: #ffffff !important;
	transition: all 150ms ease-in-out;
}

.marie-coder-accent:hover {
	background: linear-gradient(135deg, #7b4fd4 0%, #a03bf0 100%) !important;
	border-color: #7b4fd4 !important;
	transform: translateY(-1px);
	box-shadow: 0 4px 8px rgba(107, 70, 193, 0.3);
}

.marie-coder-accent:active {
	background: linear-gradient(135deg, #5a3a9f 0%, #7c29c8 100%) !important;
	border-color: #5a3a9f !important;
	transform: translateY(0);
	box-shadow: 0 2px 4px rgba(107, 70, 193, 0.2);
}

.marie-coder-accent:disabled {
	background: color-mix(in srgb, #6b46c1 30%, transparent) !important;
	border-color: color-mix(in srgb, #6b46c1 30%, transparent) !important;
	opacity: 0.5;
	cursor: not-allowed;
	transform: none;
	box-shadow: none;
}

/**
 * Subtle branded background
 * Use for cards and containers that need gentle branding
 */
.marie-coder-subtle {
	background: color-mix(in srgb, #6b46c1 8%, var(--vscode-editor-background)) !important;
	border: 1px solid color-mix(in srgb, #6b46c1 20%, transparent) !important;
}

.marie-coder-subtle:hover {
	background: color-mix(in srgb, #6b46c1 12%, var(--vscode-editor-background)) !important;
	border-color: color-mix(in srgb, #6b46c1 30%, transparent) !important;
}

/**
 * Clean, minimal styling
 * Use for refined, uncluttered interfaces
 */
.marie-kondo-clean {
	transition: all 150ms ease-in-out;
	border-radius: 4px;
}

.marie-kondo-clean:hover {
	transform: translateY(-1px);
}

.marie-kondo-clean:active {
	transform: translateY(0);
}

/**
 * Card styles with branded accents
 */
.marie-card {
	background: color-mix(in srgb, var(--vscode-toolbar-hoverBackground) 65%, transparent);
	border: 1px solid var(--vscode-panel-border);
	border-radius: 4px;
	padding: 12px;
	transition: all 150ms ease-in-out;
}

.marie-card:hover {
	background: color-mix(in srgb, var(--vscode-toolbar-hoverBackground) 100%, transparent);
	border-color: color-mix(in srgb, #6b46c1 30%, var(--vscode-panel-border));
}

.marie-card.branded {
	border-left: 3px solid #6b46c1;
}

/**
 * Focus ring with brand color
 */
.marie-focus-ring:focus-visible {
	outline: 2px solid #6b46c1;
	outline-offset: 2px;
}

/* ==========================================================================
   View Transitions API - Smooth Native Animations
   ========================================================================== */

/* Base transition styles */
::view-transition-old(root),
::view-transition-new(root) {
	animation-duration: 0.3s;
	animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

/* Fade transition (default) */
::view-transition-old(fade),
::view-transition-new(fade) {
	animation-duration: 0.2s;
}

::view-transition-old(fade) {
	animation-name: fade-out;
}

::view-transition-new(fade) {
	animation-name: fade-in;
}

@keyframes fade-out {
	to {
		opacity: 0;
	}
}

@keyframes fade-in {
	from {
		opacity: 0;
	}
}

/* Slide transitions */
::view-transition-old(slide-left) {
	animation-name: slide-out-left;
}

::view-transition-new(slide-left) {
	animation-name: slide-in-left;
}

::view-transition-old(slide-right) {
	animation-name: slide-out-right;
}

::view-transition-new(slide-right) {
	animation-name: slide-in-right;
}

@keyframes slide-out-left {
	to {
		transform: translateX(-100%);
		opacity: 0;
	}
}

@keyframes slide-in-left {
	from {
		transform: translateX(100%);
		opacity: 0;
	}
}

@keyframes slide-out-right {
	to {
		transform: translateX(100%);
		opacity: 0;
	}
}

@keyframes slide-in-right {
	from {
		transform: translateX(-100%);
		opacity: 0;
	}
}

/* Scale transitions */
::view-transition-old(scale) {
	animation-name: scale-out;
}

::view-transition-new(scale) {
	animation-name: scale-in;
}

@keyframes scale-out {
	to {
		transform: scale(0.8);
		opacity: 0;
	}
}

@keyframes scale-in {
	from {
		transform: scale(0.8);
		opacity: 0;
	}
}

/* Zoom transitions */
::view-transition-old(zoom) {
	animation-name: zoom-out;
}

::view-transition-new(zoom) {
	animation-name: zoom-in;
}

@keyframes zoom-out {
	to {
		transform: scale(1.2);
		opacity: 0;
	}
}

@keyframes zoom-in {
	from {
		transform: scale(0.8);
		opacity: 0;
	}
}

/* Respect reduced motion preference */
@media (prefers-reduced-motion: reduce) {
	::view-transition-old(root),
	::view-transition-new(root),
	::view-transition-old(*),
	::view-transition-new(*) {
		animation-duration: 0.01ms !important;
		animation-iteration-count: 1 !important;
		transition-duration: 0.01ms !important;
	}
}

/* ==========================================================================
   Thinking/Reasoning Block Styles
   ========================================================================== */

/**
 * Hover effect for thinking/reasoning blocks
 * Provides strong visual feedback for collapsible sections with enhanced separation
 */
.thinking-block-hover:hover {
	background: linear-gradient(
		135deg,
		color-mix(in srgb, var(--vscode-charts-purple, #c678dd) 12%, var(--vscode-textBlockQuote-background)) 0%,
		var(--vscode-textBlockQuote-background) 100%
	) !important;
	border-color: color-mix(in srgb, var(--vscode-charts-purple, #c678dd) 50%, var(--vscode-textSeparator-foreground)) !important;
	border-left-width: 5px !important;
	transform: translateY(-2px) scale(1.005);
	box-shadow:
		0 4px 12px rgba(0, 0, 0, 0.2),
		0 0 0 1px color-mix(in srgb, var(--vscode-charts-purple, #c678dd) 20%, transparent),
		inset 0 1px 0 rgba(255, 255, 255, 0.05);
}

/**
 * Active state for thinking blocks with tactile feedback
 */
.thinking-block-hover:active {
	transform: translateY(0) scale(1);
	box-shadow:
		0 2px 4px rgba(0, 0, 0, 0.15),
		inset 0 1px 2px rgba(0, 0, 0, 0.1);
	border-left-width: 6px !important;
}

/**
 * Optional pulse animation for thinking blocks (can be applied on appear)
 */
@keyframes thinkingPulse {
	0%,
	100% {
		border-left-color: var(--vscode-charts-purple, #c678dd);
		box-shadow:
			0 2px 6px rgba(0, 0, 0, 0.1),
			inset 0 1px 0 rgba(255, 255, 255, 0.03);
	}
	50% {
		border-left-color: color-mix(in srgb, var(--vscode-charts-purple, #c678dd) 70%, white);
		box-shadow:
			0 2px 8px rgba(198, 120, 221, 0.3),
			inset 0 1px 0 rgba(255, 255, 255, 0.05);
	}
}

/**
 * Separator line enhancement for expanded thinking blocks
 */
.thinking-separator {
	background: linear-gradient(
		90deg,
		var(--vscode-charts-purple, #c678dd) 0%,
		color-mix(in srgb, var(--vscode-charts-purple, #c678dd) 30%, var(--vscode-textSeparator-foreground)) 50%,
		transparent 100%
	);
	height: 2px;
}

/* ==========================================================================
   Paint Holding - Flash Prevention
   ========================================================================== */

/* Paint holding body class */
body.paint-held {
	/* Optimize rendering during paint hold */
	contain: layout style paint;
}

/* Paint holding overlay */
.paint-holding-overlay {
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background: var(--vscode-editor-background, #1e1e1e);
	opacity: 0;
	animation: fadeInOverlay 0.15s ease-out forwards;
	pointer-events: none;
	z-index: 9998;
}

@keyframes fadeInOverlay {
	to {
		opacity: 1;
	}
}

/* Paint holding loading indicator */
.paint-holding-loading {
	position: fixed;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	z-index: 9999;
	opacity: 0;
	animation: fadeInLoading 0.2s ease-out 0.05s forwards;
}

@keyframes fadeInLoading {
	to {
		opacity: 1;
	}
}

/* Respect reduced motion for paint holding */
@media (prefers-reduced-motion: reduce) {
	.paint-holding-overlay,
	.paint-holding-loading {
		animation-duration: 0.01ms !important;
	}
}
