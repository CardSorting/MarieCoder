import chalk from "chalk"
import { randomBytes } from "crypto"
import { promises as fs } from "fs"
import path from "path"

export interface ProjectOptions {
	projectName: string
	template: string
	includeAuth: boolean
	includeAdmin: boolean
	includeTailwind: boolean
	includeTests: boolean
}

export class ProjectGenerator {
	private projectPath: string
	private options: ProjectOptions

	constructor(projectPath: string, options: ProjectOptions) {
		this.projectPath = projectPath
		this.options = options
	}

	async generate(): Promise<{ success: boolean; message?: string }> {
		try {
			// Create project directory
			await fs.mkdir(this.projectPath, { recursive: true })

			// Copy template files
			await this.copyTemplateFiles()

			// Generate configuration files
			await this.generateConfigFiles()

			// Update package.json with project name
			await this.updatePackageJson()

			console.log(chalk.green(`✅ Project structure generated at ${this.projectPath}`))
			return { success: true }
		} catch (error) {
			console.error(chalk.red(`❌ Project generation failed: ${error}`))
			return { success: false, message: error instanceof Error ? error.message : String(error) }
		}
	}

	private async copyTemplateFiles(): Promise<void> {
		// Look for template in multiple possible locations
		const possiblePaths = [
			path.join(process.cwd(), "templates", "noormme-nextjs"),
			path.join(process.cwd(), "..", "templates", "noormme-nextjs"),
			path.join(process.cwd(), "..", "..", "templates", "noormme-nextjs"),
			path.resolve(process.cwd(), "templates", "noormme-nextjs"),
		]

		let templatePath: string | null = null

		for (const possiblePath of possiblePaths) {
			try {
				await fs.access(possiblePath)
				templatePath = possiblePath
				break
			} catch {
				// Continue checking other paths
			}
		}

		if (!templatePath) {
			// Create a minimal template structure if no template is found
			console.log(chalk.yellow("⚠️  Template not found, creating minimal structure..."))
			await this.createMinimalTemplate()
			return
		}

		await this.copyDirectory(templatePath, this.projectPath)
	}

	private async copyDirectory(src: string, dest: string): Promise<void> {
		const entries = await fs.readdir(src, { withFileTypes: true })

		for (const entry of entries) {
			const srcPath = path.join(src, entry.name)
			const destPath = path.join(dest, entry.name)

			// Skip node_modules and other build artifacts
			if (
				entry.name === "node_modules" ||
				entry.name === ".next" ||
				entry.name === "dist" ||
				entry.name === "build" ||
				entry.name === "*.tsbuildinfo"
			) {
				continue
			}

			if (entry.isDirectory()) {
				await fs.mkdir(destPath, { recursive: true })
				await this.copyDirectory(srcPath, destPath)
			} else {
				await fs.copyFile(srcPath, destPath)
			}
		}
	}

	private async generateConfigFiles(): Promise<void> {
		// Generate .env.local
		await this.generateEnvFile()

		// Generate tsconfig.json if needed
		await this.generateTsConfig()

		// Generate next.config.js if needed
		await this.generateNextConfig()

		// Generate tailwind.config.js if needed
		if (this.options.includeTailwind) {
			await this.generateTailwindConfig()
		}
	}

	private async generateEnvFile(): Promise<void> {
		const envContent = `# NOORMME Next.js Environment Configuration
# Generated by NOORMME CLI

# Database
DATABASE_URL="file:./database.sqlite"

# NextAuth
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="${this.generateSecret()}"

# OAuth Providers (optional)
# Google OAuth
${this.options.includeAuth ? "# GOOGLE_CLIENT_ID=your_google_client_id\n# GOOGLE_CLIENT_SECRET=your_google_client_secret" : "# GOOGLE_CLIENT_ID=\n# GOOGLE_CLIENT_SECRET="}

# GitHub OAuth
${this.options.includeAuth ? "# GITHUB_CLIENT_ID=your_github_client_id\n# GITHUB_CLIENT_SECRET=your_github_client_secret" : "# GITHUB_CLIENT_ID=\n# GITHUB_CLIENT_SECRET="}

# Payment Providers (optional)
# Stripe
# STRIPE_PUBLIC_KEY=your_stripe_public_key
# STRIPE_SECRET_KEY=your_stripe_secret_key
# STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret

# PayPal
# PAYPAL_CLIENT_ID=your_paypal_client_id
# PAYPAL_CLIENT_SECRET=your_paypal_client_secret

# Application
APP_NAME="${this.options.projectName}"
APP_URL="http://localhost:3000"
NODE_ENV="development"
`

		await fs.writeFile(path.join(this.projectPath, ".env.local"), envContent)
	}

	private async generateTsConfig(): Promise<void> {
		const tsconfigContent = {
			compilerOptions: {
				lib: ["dom", "dom.iterable", "es6"],
				allowJs: true,
				skipLibCheck: true,
				strict: true,
				noEmit: true,
				esModuleInterop: true,
				module: "esnext",
				moduleResolution: "bundler",
				resolveJsonModule: true,
				isolatedModules: true,
				jsx: "preserve",
				incremental: true,
				plugins: [
					{
						name: "next",
					},
				],
				baseUrl: ".",
				paths: {
					"@/*": ["./src/*"],
					"@/components/*": ["./src/components/*"],
					"@/lib/*": ["./src/lib/*"],
					"@/types/*": ["./src/types/*"],
					"@/app/*": ["./src/app/*"],
				},
			},
			include: ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
			exclude: ["node_modules"],
		}

		await fs.writeFile(path.join(this.projectPath, "tsconfig.json"), JSON.stringify(tsconfigContent, null, 2))
	}

	private async generateNextConfig(): Promise<void> {
		const nextConfigContent = `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  images: {
    domains: ['localhost'],
  },
  // Enable SQLite in production
  env: {
    DATABASE_URL: process.env.DATABASE_URL,
  },
}

module.exports = nextConfig
`

		await fs.writeFile(path.join(this.projectPath, "next.config.js"), nextConfigContent)
	}

	private async generateTailwindConfig(): Promise<void> {
		const tailwindConfigContent = `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
`

		await fs.writeFile(path.join(this.projectPath, "tailwind.config.js"), tailwindConfigContent)
	}

	private async updatePackageJson(): Promise<void> {
		const packageJsonPath = path.join(this.projectPath, "package.json")

		try {
			const packageJson = JSON.parse(await fs.readFile(packageJsonPath, "utf-8"))

			// Update package name
			packageJson.name = this.options.projectName
			packageJson.description = `A Next.js application with NOORMME integration - ${this.options.projectName}`

			// Update scripts for better development experience
			packageJson.scripts = {
				...packageJson.scripts,
				setup: "npm run migrate && npm run seed",
				"dev:full": "npm run setup && npm run dev",
				reset: "rm -f database.sqlite && npm run setup",
				"type-check": "tsc --noEmit",
				"lint:fix": "next lint --fix",
				migrate: "tsx scripts/migrate.ts",
				seed: "tsx scripts/seed.ts",
			}

			await fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2))
		} catch (error) {
			console.warn(chalk.yellow(`⚠️  Could not update package.json: ${error}`))
		}
	}

	private generateSecret(): string {
		return randomBytes(32).toString("hex")
	}

	private async createMinimalTemplate(): Promise<void> {
		// Create minimal Next.js project structure
		const minimalStructure = {
			"src/app/layout.tsx": `import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: '${this.options.projectName}',
  description: 'A Next.js application with NOORMME integration',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`,
			"src/app/page.tsx": `export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="z-10 max-w-5xl w-full items-center justify-between font-mono text-sm lg:flex">
        <p className="fixed left-0 top-0 flex w-full justify-center border-b border-gray-300 bg-gradient-to-b from-zinc-200 pb-6 pt-8 backdrop-blur-2xl dark:border-neutral-800 dark:bg-zinc-800/30 dark:from-inherit lg:static lg:w-auto lg:rounded-xl lg:border lg:bg-gray-200 lg:p-4 lg:dark:bg-zinc-800/30">
          Welcome to <code className="font-mono font-bold">${this.options.projectName}</code>
        </p>
      </div>

      <div className="relative flex place-items-center">
        <h1 className="text-4xl font-bold text-center">
          NOORMME Next.js Application
        </h1>
      </div>

      <div className="mb-32 grid text-center lg:max-w-5xl lg:w-full lg:mb-0 lg:grid-cols-4 lg:text-left">
        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            Next.js{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Built with Next.js 15 and App Router
          </p>
        </div>

        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            SQLite{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Powered by SQLite with WAL mode optimization
          </p>
        </div>

        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            TypeScript{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Full TypeScript support with strict configuration
          </p>
        </div>

        <div className="group rounded-lg border border-transparent px-5 py-4 transition-colors hover:border-gray-300 hover:bg-gray-100 hover:dark:border-neutral-700 hover:dark:bg-neutral-800/30">
          <h2 className="mb-3 text-2xl font-semibold">
            NOORMME{' '}
            <span className="inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none">
              -&gt;
            </span>
          </h2>
          <p className="m-0 max-w-[30ch] text-sm opacity-50">
            Following NORMIE DEV methodology
          </p>
        </div>
      </div>
    </main>
  )
}`,
			"src/app/globals.css": `@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}`,
			"lib/db.ts": `// Database configuration
export const dbConfig = {
  dialect: 'sqlite' as const,
  connection: {
    database: './database.sqlite',
  },
}

// This will be replaced with actual NOORMME integration
export const db = {
  // Placeholder for NOORMME database instance
  getRepository: (table: string) => {
    console.log(\`Getting repository for table: \${table}\`)
    return {
      findById: async (id: string) => null,
      findAll: async () => [],
      create: async (data: any) => data,
      update: async (id: string, data: any) => data,
      delete: async (id: string) => true,
    }
  }
}`,
			"scripts/migrate.ts": `// Database migration script
console.log('Running database migrations...')

// This will be replaced with actual NOORMME migration
console.log('✅ Migrations completed')`,
			"scripts/seed.ts": `// Database seeding script
console.log('Seeding database...')

// This will be replaced with actual NOORMME seeding
console.log('✅ Database seeded')`,
		}

		// Create the minimal structure
		for (const [filePath, content] of Object.entries(minimalStructure)) {
			const fullPath = path.join(this.projectPath, filePath)
			await fs.mkdir(path.dirname(fullPath), { recursive: true })
			await fs.writeFile(fullPath, content)
		}
	}
}
