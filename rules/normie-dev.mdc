---
description: NORMIE DEV methodology for NOORMME development
globs: '**/*.{ts,tsx,js,jsx,md}'
alwaysApply: true
---

# NORMIE DEV Methodology for NOORMME

## Core Philosophy

### "Does this spark joy?"
When building features, ask:
- Does this make developers happier?
- Does this reduce complexity?
- Does this improve the experience?
- Does this add value?

If no, don't build it.

### "Thank it for its service and let it go"
Acknowledge what taught us valuable lessons, then **DELETE IMMEDIATELY**:

**Thank you, PostgreSQL complexity** → **DELETED** - Now we use SQLite with WAL mode
**Thank you, framework abstractions** → **DELETED** - Now we use standard tools directly
**Thank you, configuration hell** → **DELETED** - Now we use smart defaults
**Thank you, vendor lock-in** → **DELETED** - Now we use framework-agnostic patterns
**Thank you, legacy services** → **DELETED** - Now we use unified architecture
**Thank you, backward compatibility** → **DELETED** - Now we use clean breaks only

### "Keep only what sparks joy"
Preserve what makes development delightful:
- ✅ **SQLite simplicity** with PostgreSQL-like capabilities
- ✅ **Next.js performance** with proven organizational patterns
- ✅ **TypeScript safety** with auto-generated types
- ✅ **Zero configuration** with intelligent defaults

## Implementation Guidelines

### Eliminate Complexity - ZERO TOLERANCE
- **DELETE** unnecessary abstractions immediately
- **DELETE** complex configuration - use smart defaults only
- **DELETE** boilerplate - use automation instead
- **DELETE** learning curves - use proven patterns only

### Preserve Value
- Keep powerful features
- Maintain performance
- Ensure type safety
- Provide excellent DX

### Organize What Remains
- Apply proven patterns
- Use consistent conventions
- Create clear structure
- Maintain flexibility

## Examples

### Before (Doesn't Spark Joy)
```typescript
// Complex setup
const db = new ComplexORM({
  connection: {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    username: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_NAME,
    ssl: { rejectUnauthorized: false },
    pool: { min: 2, max: 10 }
  },
  models: [User, Post, Comment],
  migrations: './migrations',
  seeds: './seeds'
})

// Complex usage
const user = await db.models.User.findOne({
  where: { email: 'john@example.com' },
  include: [{ model: db.models.Post, as: 'posts' }]
})
```

### After (Sparks Joy)
```typescript
// Simple setup
const db = new NOORMME({
  dialect: 'sqlite',
  connection: { database: './app.db' }
})

// Simple usage
const userRepo = db.getRepository('users')
const user = await userRepo.findByEmail('john@example.com')
```

## Decision Framework

### For Every Feature - MANDATORY QUESTIONS
1. **Does this spark joy?** (Improves developer experience)
2. **Can we DELETE legacy code?** (Eliminate old implementations)
3. **Does this add value?** (Solve real problems)
4. **Can we compose this?** (Use existing tools)

### For Every Abstraction - ELIMINATION CHECKLIST
1. **Is this necessary?** (Does it solve a real problem)
2. **Can we DELETE this?** (Use existing tools instead)
3. **Does this improve DX?** (Better developer experience)
4. **Can we DELETE complexity?** (Reduce cognitive load to zero)

## Success Metrics

### Developer Joy
- Setup time < 5 minutes
- Learning curve < 1 hour
- Error messages are actionable
- Documentation is clear and helpful

### Simplicity
- Zero configuration required
- Smart defaults everywhere
- No vendor lock-in
- Standard tools and patterns

### Performance
- < 50ms query times
- < 100ms page loads
- Minimal bundle size
- Fast development cycles

## Legacy Elimination Protocol

### MANDATORY Actions:
1. **DELETE** all legacy files immediately
2. **DELETE** backward compatibility layers
3. **DELETE** old service implementations
4. **DELETE** complex abstractions
5. **REPLACE** with clean, unified architecture

### FORBIDDEN Actions:
- ❌ Maintaining legacy code "for compatibility"
- ❌ Creating wrapper services
- ❌ Gradual migration strategies
- ❌ Keeping old and new systems simultaneously

## Conclusion

The NORMIE DEV methodology ensures NOORMME:
- **DELETES complexity** that doesn't add value
- **DELETES legacy systems** completely
- **DELETES backward compatibility** entirely
- **KEEPS only what sparks joy** - clean, unified architecture
- **ORGANIZES what remains** with proven patterns

**Remember**: Software development should spark joy, not frustration. **DELETE everything that doesn't spark joy.**