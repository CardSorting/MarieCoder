---
description: Central rule registry for NOORMME cursor rules coordination
globs: '**/*'
alwaysApply: true
priority: 0
---

# NOORMME Rule Registry

## üéØ **Central Coordination**

This registry coordinates all NOORMME cursor rules to ensure consistent application across the entire codebase.

## üìã **Rule Module Registry**

### Core Orchestrator
- **`core-rules.mdc`** - Central rule orchestrator (Priority: 1)
  - Coordinates all rule modules
  - Enforces NORMIE DEV methodology
  - Provides decision framework

### Methodology Rules
- **`methodology/normie-dev.mdc`** - Core philosophy and principles (Priority: 1)
  - NORMIE DEV methodology enforcement
  - Legacy elimination protocols
  - Decision framework

### Architecture Rules
- **`architecture/patterns.mdc`** - System architecture patterns (Priority: 2)
  - Clean architecture principles
  - Service layer patterns
  - Component organization

### Database Rules
- **`database/kysely-integration.mdc`** - Database and Kysely patterns (Priority: 3)
  - Kysely integration best practices
  - Repository patterns
  - Type-safe database operations

### Coding Rules
- **`coding/typescript-standards.mdc`** - TypeScript coding standards (Priority: 4)
  - Code style and conventions
  - Type safety requirements
  - Documentation standards

### Framework Rules
- **`frameworks/nextjs-patterns.mdc`** - Next.js and React patterns (Priority: 5)
  - App Router patterns
  - Component architecture
  - Performance optimization

### Quality Rules
- **`quality/testing-validation.mdc`** - Testing and quality standards (Priority: 6)
  - Testing patterns and requirements
  - Code coverage standards
  - Quality gates

## üîÑ **Rule Application Matrix**

| Priority | Rule Module | Scope | Auto-Apply | Key Focus |
|----------|-------------|-------|------------|-----------|
| 1 | Core Rules | All files | ‚úÖ | Central coordination |
| 1 | NORMIE DEV | All files | ‚úÖ | Core methodology |
| 2 | Architecture | `.ts` files | ‚úÖ | System design |
| 3 | Database | `.ts` files | ‚úÖ | Data patterns |
| 4 | TypeScript | `.ts/.tsx` files | ‚úÖ | Code quality |
| 5 | Next.js | `.ts/.tsx/.js/.jsx` | ‚úÖ | Framework patterns |
| 6 | Quality | Test files | ‚úÖ | Testing standards |

## üéØ **Rule Composition Strategy**

### Dynamic Rule Application
Rules are composed based on:

#### File Type Context
- **`.ts` files**: All rules apply (architecture, database, coding, framework, quality)
- **`.tsx` files**: All rules except database-specific patterns
- **`.js/.jsx` files**: Framework and quality rules only
- **`.md` files**: Methodology and documentation rules
- **Test files**: All rules plus enhanced quality requirements

#### Directory Context
- **`src/lib/`**: Architecture, database, coding rules
- **`src/components/`**: Framework, coding, quality rules
- **`src/app/`**: Framework, architecture, coding rules
- **`src/__tests__/`**: Quality rules with enhanced coverage requirements

#### Project Phase
- **Development**: All rules with focus on rapid iteration
- **Testing**: Enhanced quality rules and coverage requirements
- **Production**: Performance and security rule emphasis

## üîß **Rule Integration Points**

### Cross-Module Dependencies
```
Core Rules (Priority 1)
‚îú‚îÄ‚îÄ Methodology Rules (Priority 1)
‚îú‚îÄ‚îÄ Architecture Rules (Priority 2)
‚îÇ   ‚îú‚îÄ‚îÄ Database Rules (Priority 3)
‚îÇ   ‚îú‚îÄ‚îÄ Coding Rules (Priority 4)
‚îÇ   ‚îî‚îÄ‚îÄ Framework Rules (Priority 5)
‚îî‚îÄ‚îÄ Quality Rules (Priority 6)
```

### Rule Inheritance
- **Base Rules**: Applied to all files
- **Domain Rules**: Applied based on file type and location
- **Feature Rules**: Applied based on specific functionality
- **Override Rules**: Project-specific customizations

## üìä **Rule Effectiveness Metrics**

### Compliance Tracking
- **Real-time Validation**: Continuous rule checking during development
- **Pre-commit Hooks**: Automated rule validation before commits
- **CI/CD Integration**: Automated rule enforcement in pipelines
- **Metrics Dashboard**: Rule compliance and effectiveness tracking

### Quality Metrics
- **Code Quality**: Complexity, maintainability, test coverage
- **Developer Experience**: Setup time, learning curve, error rates
- **Performance**: Build times, runtime performance, bundle size
- **Maintenance**: Bug rates, feature velocity, technical debt

## üö® **Rule Violation Handling**

### Automatic Enforcement
1. **Real-time Feedback**: Immediate rule violation notifications
2. **Pre-commit Validation**: Block commits with rule violations
3. **CI/CD Gates**: Fail builds with critical rule violations
4. **Code Review Integration**: Automated rule compliance checks

### Violation Severity Levels
- **Critical**: Blocks development (legacy code, security issues)
- **High**: Requires immediate attention (performance, maintainability)
- **Medium**: Should be addressed before merge (code style, patterns)
- **Low**: Best practice recommendations (documentation, optimization)

## üîç **Rule Customization**

### Project-Specific Rules
```typescript
// .cursor/rules/project-specific.mdc
---
description: Project-specific NOORMME rule customizations
globs: '**/*'
alwaysApply: true
priority: 10
---

# Project-Specific Rules

## Custom Business Logic Rules
- Domain-specific validation patterns
- Business rule enforcement
- Custom error handling patterns

## Integration-Specific Rules
- Third-party service integration patterns
- API design standards
- Authentication and authorization rules
```

### Rule Override Patterns
```typescript
// Override specific rules for legacy migration
const legacyMigrationRules = {
  'database/kysely-integration': {
    enabled: false,
    reason: 'Legacy database migration in progress',
    until: '2024-03-01'
  }
}
```

## üìà **Rule Evolution**

### Version Management
- **Rule Versioning**: Semantic versioning for rule changes
- **Migration Paths**: Clear upgrade paths for rule updates
- **Backward Compatibility**: Graceful handling of rule changes
- **Deprecation Notices**: Clear communication of rule lifecycle

### Continuous Improvement
- **Feedback Collection**: Developer feedback on rule effectiveness
- **Performance Monitoring**: Rule impact on development velocity
- **Quality Metrics**: Rule correlation with code quality improvements
- **Community Input**: Open source rule contributions and improvements

## üéØ **Rule Success Criteria**

### Developer Experience
- **Setup Time**: < 5 minutes for new developers
- **Learning Curve**: < 1 hour to understand all rules
- **Error Messages**: Clear, actionable rule violation messages
- **Documentation**: Comprehensive, searchable rule documentation

### Code Quality
- **Consistency**: 95%+ rule compliance across codebase
- **Maintainability**: Reduced complexity and improved readability
- **Performance**: No negative impact on build or runtime performance
- **Security**: Enhanced security through enforced patterns

### Business Impact
- **Development Velocity**: Increased feature delivery speed
- **Bug Reduction**: Fewer production issues through quality gates
- **Onboarding**: Faster new developer productivity
- **Technical Debt**: Reduced accumulation through enforced patterns

## üîß **Rule Maintenance**

### Regular Updates
- **Monthly Reviews**: Rule effectiveness and developer feedback
- **Quarterly Updates**: Rule improvements and new patterns
- **Annual Overhaul**: Major rule architecture improvements
- **Emergency Updates**: Critical rule fixes and security updates

### Documentation Maintenance
- **Rule Documentation**: Keep all rule documentation current
- **Example Updates**: Regular updates to code examples
- **Migration Guides**: Clear guides for rule changes
- **Best Practices**: Evolving best practice documentation

---

This registry ensures that all NOORMME cursor rules work together harmoniously to create a clean, maintainable, and joyful development experience while enforcing the NORMIE DEV methodology consistently across all aspects of development.