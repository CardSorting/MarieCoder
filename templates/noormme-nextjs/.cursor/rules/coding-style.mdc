---
description: NOORMME coding style and conventions
globs: '**/*.{ts,tsx,js,jsx}'
alwaysApply: true
---

# NOORMME Coding Style Guidelines

## Marie Kondo Principle
**CRITICAL**: All code must spark joy. If it doesn't, delete it and rewrite it cleanly.

## General Style

### Indentation and Formatting
- Use 2 spaces for indentation (no tabs)
- Use single quotes for strings
- Use trailing commas in objects and arrays
- Limit line length to 100 characters
- Use semicolons consistently

### Naming Conventions
- **Variables and Functions**: camelCase (`userName`, `getUserById`)
- **Classes**: PascalCase (`UserService`, `DatabaseConnection`)
- **Constants**: UPPER_SNAKE_CASE (`MAX_RETRY_COUNT`, `DATABASE_URL`)
- **Interfaces**: PascalCase with descriptive names (`UserData`, `DatabaseConfig`)
- **Types**: PascalCase (`UserStatus`, `QueryResult`)

### TypeScript Specific
- Use strict TypeScript configuration
- **FORBIDDEN**: `any` types - use proper typing or delete the code
- Use interfaces for object shapes
- Use type aliases for unions and primitives
- Include JSDoc comments for all public functions and classes
- **MANDATORY**: Delete legacy type definitions when creating new ones

## NOORMME-Specific Conventions

### Database Operations
```typescript
// Repository pattern
const userRepo = db.getRepository('users')
const user = await userRepo.findById(id)

// Kysely queries
const kysely = db.getKysely()
const result = await kysely
  .selectFrom('users')
  .where('status', '=', 'active')
  .execute()
```

### Service Classes
```typescript
export class UserService extends BaseService<User> {
  constructor(db: NOORMME) {
    super(db.getRepository('users'), db)
  }

  async createUser(data: CreateUserData): Promise<User> {
    // Business logic here
    const user = await this.repository.create(data)
    return user
  }
}
```

### Error Handling
```typescript
export class NOORMError extends Error {
  constructor(
    message: string,
    public code: string,
    public actionable?: string
  ) {
    super(message)
  }
}
```

### Documentation
- Include JSDoc comments for all public APIs
- Document complex business logic
- Provide usage examples in comments
- Keep documentation up-to-date with code changes

## Legacy Code Elimination
- **MANDATORY**: Delete old implementations when creating new ones
- **FORBIDDEN**: Maintaining multiple versions of the same functionality
- **REQUIRED**: Update all imports to use new services immediately
- **PROHIBITED**: Backward compatibility wrappers or legacy exports